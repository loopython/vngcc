"""update db

Revision ID: 7cbf035aaea6
Revises: 28b2a34faad4
Create Date: 2024-09-11 23:56:45.318708

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = '7cbf035aaea6'
down_revision = '28b2a34faad4'
branch_labels = None
depends_on = None

def check_index_exists(table_name, index_name):
    """Check if an index exists in the table."""
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    indexes = inspector.get_indexes(table_name)
    for index in indexes:
        if index_name == index['name']:
            return True
    return False

def check_constraint_exists(table_name, constraint_name):
    """Check if a constraint exists in the table."""
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    constraints = inspector.get_foreign_keys(table_name)
    for constraint in constraints:
        if constraint_name == constraint['name']:
            return True
    return False

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.add_column(sa.Column('slug', sa.String(length=255), nullable=False))
        batch_op.add_column(sa.Column('admin_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('category_id', sa.Integer(), nullable=False))

        # Drop index if it exists
        if check_index_exists('post', 'ix_post_user_id'):
            batch_op.drop_index('ix_post_user_id')
        
        batch_op.create_index(batch_op.f('ix_post_admin_id'), ['admin_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_post_category_id'), ['category_id'], unique=False)
        batch_op.create_unique_constraint('uq_post_slug', ['slug'])

        # Drop old constraints if they exist
        if check_constraint_exists('post', 'fk_post_user_id'):
            batch_op.drop_constraint('fk_post_user_id', type_='foreignkey')
        if check_constraint_exists('post', 'fk_post_category_id'):
            batch_op.drop_constraint('fk_post_category_id', type_='foreignkey')

        # Create new constraints
        batch_op.create_foreign_key('fk_post_user_id', 'user', ['admin_id'], ['id'])
        batch_op.create_foreign_key('fk_post_category_id', 'category', ['category_id'], ['id'])
        
        batch_op.drop_column('user_id')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=120),
               nullable=True)

    with op.batch_alter_table('post', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=False))

        # Drop new constraints if they exist
        if check_constraint_exists('post', 'fk_post_category_id'):
            batch_op.drop_constraint('fk_post_category_id', type_='foreignkey')
        if check_constraint_exists('post', 'fk_post_user_id'):
            batch_op.drop_constraint('fk_post_user_id', type_='foreignkey')
        
        # Create old constraints
        batch_op.create_foreign_key('fk_post_user_id', 'user', ['user_id'], ['id'])
        
        batch_op.drop_constraint('uq_post_slug', type_='unique')
        
        # Drop new indexes if they exist
        if check_index_exists('post', 'ix_post_category_id'):
            batch_op.drop_index(batch_op.f('ix_post_category_id'))
        if check_index_exists('post', 'ix_post_admin_id'):
            batch_op.drop_index(batch_op.f('ix_post_admin_id'))
        
        batch_op.create_index('ix_post_user_id', ['user_id'], unique=False)
        batch_op.drop_column('category_id')
        batch_op.drop_column('admin_id')
        batch_op.drop_column('slug')

    # ### end Alembic commands ###
